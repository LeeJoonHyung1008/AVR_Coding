
Example2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000060  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000065  00000000  00000000  00000965  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000213  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000126  00000000  00000000  00000bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000315  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ea  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000183  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000004e  00000000  00000000  000012f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:




void main()
{
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	IO_init();
  ae:	0e 94 87 00 	call	0x10e	; 0x10e <IO_init>
	unsigned char sw_input,sw_flag,sw_i;
	unsigned char out_status, out_flag;
	out_flag=0;
  b2:	00 e0       	ldi	r16, 0x00	; 0
	out_status=0;
  b4:	10 e0       	ldi	r17, 0x00	; 0

	while(1){
		LED_PORT=(1<<out_status);
  b6:	c1 e0       	ldi	r28, 0x01	; 1
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <main+0x20>
			}
			delay_ms(1);
		}
		if(out_flag)
		{
			if(out_status==0)
  bc:	01 e0       	ldi	r16, 0x01	; 1
			{
				out_status=7;
  be:	17 e0       	ldi	r17, 0x07	; 7
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <main+0x20>
		}
		else
		{
			out_status++;
			if(out_status>7)
			out_status=0;
  c2:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char out_status, out_flag;
	out_flag=0;
	out_status=0;

	while(1){
		LED_PORT=(1<<out_status);
  c4:	ce 01       	movw	r24, r28
  c6:	01 2e       	mov	r0, r17
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x2a>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x26>
  d2:	8b bb       	out	0x1b, r24	; 27
  d4:	84 e6       	ldi	r24, 0x64	; 100
  d6:	f8 2e       	mov	r15, r24
		sw_flag=1;
		for(sw_i=0;sw_i<100;sw_i++)
		{
			sw_input=PIND;
  d8:	80 b3       	in	r24, 0x10	; 16
			sw_input&=0x03;
  da:	83 70       	andi	r24, 0x03	; 3
			if(sw_input==1)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	19 f0       	breq	.+6      	; 0xe6 <main+0x42>
			{
				out_flag=1;
			}
			else if(sw_input==2)
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	21 f4       	brne	.+8      	; 0xec <main+0x48>
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x46>
		{
			sw_input=PIND;
			sw_input&=0x03;
			if(sw_input==1)
			{
				out_flag=1;
  e6:	01 e0       	ldi	r16, 0x01	; 1
  e8:	01 c0       	rjmp	.+2      	; 0xec <main+0x48>
			}
			else if(sw_input==2)
			{
				out_flag=0;
  ea:	00 e0       	ldi	r16, 0x00	; 0
			}
			delay_ms(1);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 99 00 	call	0x132	; 0x132 <delay_ms>
  f4:	fa 94       	dec	r15
	out_status=0;

	while(1){
		LED_PORT=(1<<out_status);
		sw_flag=1;
		for(sw_i=0;sw_i<100;sw_i++)
  f6:	81 f7       	brne	.-32     	; 0xd8 <main+0x34>
			{
				out_flag=0;
			}
			delay_ms(1);
		}
		if(out_flag)
  f8:	00 23       	and	r16, r16
  fa:	29 f0       	breq	.+10     	; 0x106 <main+0x62>
		{
			if(out_status==0)
  fc:	11 23       	and	r17, r17
  fe:	f1 f2       	breq	.-68     	; 0xbc <main+0x18>
			{
				out_status=7;
			}
			else
			{
				out_status--;
 100:	11 50       	subi	r17, 0x01	; 1
 102:	01 e0       	ldi	r16, 0x01	; 1
 104:	df cf       	rjmp	.-66     	; 0xc4 <main+0x20>
			}
		}
		else
		{
			out_status++;
 106:	1f 5f       	subi	r17, 0xFF	; 255
			if(out_status>7)
 108:	18 30       	cpi	r17, 0x08	; 8
 10a:	d9 f2       	breq	.-74     	; 0xc2 <main+0x1e>
 10c:	db cf       	rjmp	.-74     	; 0xc4 <main+0x20>

0000010e <IO_init>:
#include <avr/io.h>
#include "LED.h"

void IO_init()
{
	PORTA=0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	8b bb       	out	0x1b, r24	; 27
	DDRA=0xFF;
 112:	8a bb       	out	0x1a, r24	; 26
	PORTC=0xFF;
 114:	85 bb       	out	0x15, r24	; 21
	DDRC=0xFF;
 116:	84 bb       	out	0x14, r24	; 20
	DDRD=0x1C;
 118:	8c e1       	ldi	r24, 0x1C	; 28
 11a:	81 bb       	out	0x11, r24	; 17
}
 11c:	08 95       	ret

0000011e <delay_us>:
#include "delay.h"

void delay_us(unsigned int time)
{
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++)
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	03 c0       	rjmp	.+6      	; 0x12a <delay_us+0xc>
	{
		asm("nop");
 124:	00 00       	nop
#include "delay.h"

void delay_us(unsigned int time)
{
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++)
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	28 17       	cp	r18, r24
 12c:	39 07       	cpc	r19, r25
 12e:	d0 f3       	brcs	.-12     	; 0x124 <delay_us+0x6>
	{
		asm("nop");
	}
}
 130:	08 95       	ret

00000132 <delay_ms>:

void delay_ms(unsigned int time)
{
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	8c 01       	movw	r16, r24
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++)
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	05 c0       	rjmp	.+10     	; 0x14c <delay_ms+0x1a>
	{
		delay_us(1000/14);
 142:	87 e4       	ldi	r24, 0x47	; 71
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 8f 00 	call	0x11e	; 0x11e <delay_us>
}

void delay_ms(unsigned int time)
{
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++)
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	c0 17       	cp	r28, r16
 14e:	d1 07       	cpc	r29, r17
 150:	c0 f3       	brcs	.-16     	; 0x142 <delay_ms+0x10>
	{
		delay_us(1000/14);
	}
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
