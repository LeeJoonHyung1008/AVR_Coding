
example_3_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  0000039a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00000aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000108  00000000  00000000  00000b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000333  00000000  00000000  00000c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f9  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003ed  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000156  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000106  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000004e  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_1>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  c6:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <INT_init>:
unsigned char display_for_INT0=0;
void INT_init();	// 각 Interrupt 레지스터를 결정한다.

void INT_init()
{
	EICRA=0x0A;	// 0x0A=0b00001010 이므로 0번, 1번 인터럽트를 falling edge로 사용하겠다는 뜻이다.
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	80 93 6a 00 	sts	0x006A, r24
	EICRB=0x00;	// 아무런 인터럽트를 사용하지 않으므로 모두 0으로 설정한다.
  d4:	1a be       	out	0x3a, r1	; 58
	EIMSK=0x03;	// 현재 0번, 1번의 인터럽트를 사용할 것이므로 0x01=0b0000011로 설정하여 0번 1번 인터럽트를 활성화 시켜준다.
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	89 bf       	out	0x39, r24	; 57
	asm("SEI");	// 모든 인터럽트를 허용한다. (SREG의 7번 비트를 1로 만들어주는 어셈블리어)
  da:	78 94       	sei
}
  dc:	08 95       	ret

000000de <__vector_1>:

SIGNAL(SIG_INTERRUPT0)	// 0번 인터럽트(1번 스위치)에 관한 내용이다. (함수의 이름과 Handle은 이미 정의되어 있으므로 정의된 이름으로 사용한다.) (1번 스위치이다.)
{	// Falling edge를 사용할 것이다.
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	0b b6       	in	r0, 0x3b	; 59
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	1f 93       	push	r17
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	if(EICRA==0x0A)
 106:	80 91 6a 00 	lds	r24, 0x006A
 10a:	8a 30       	cpi	r24, 0x0A	; 10
 10c:	11 f5       	brne	.+68     	; 0x152 <__vector_1+0x74>
 10e:	1b c0       	rjmp	.+54     	; 0x146 <__vector_1+0x68>
{
while(EICRA==0x0A)
{
SEG_ON_two_numbers_all_in_one(display_for_INT0);
 110:	80 91 0b 01 	lds	r24, 0x010B
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 57 01 	call	0x2ae	; 0x2ae <SEG_ON_two_numbers_all_in_one>
	delay_ms(1000);
 11a:	88 ee       	ldi	r24, 0xE8	; 232
 11c:	93 e0       	ldi	r25, 0x03	; 3
 11e:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
	display_for_INT0++;
 122:	80 91 0b 01 	lds	r24, 0x010B
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 0b 01 	sts	0x010B, r24
	delay_ms(1000);
 12c:	88 ee       	ldi	r24, 0xE8	; 232
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
if(display_for_INT0>=100)
 134:	80 91 0b 01 	lds	r24, 0x010B
 138:	84 36       	cpi	r24, 0x64	; 100
 13a:	10 f0       	brcs	.+4      	; 0x140 <__vector_1+0x62>
{display_for_INT0=0;}
 13c:	10 92 0b 01 	sts	0x010B, r1
EICRA=0x0B;
 140:	10 93 6a 00 	sts	0x006A, r17
 144:	01 c0       	rjmp	.+2      	; 0x148 <__vector_1+0x6a>
 146:	1b e0       	ldi	r17, 0x0B	; 11

SIGNAL(SIG_INTERRUPT0)	// 0번 인터럽트(1번 스위치)에 관한 내용이다. (함수의 이름과 Handle은 이미 정의되어 있으므로 정의된 이름으로 사용한다.) (1번 스위치이다.)
{	// Falling edge를 사용할 것이다.
	if(EICRA==0x0A)
{
while(EICRA==0x0A)
 148:	80 91 6a 00 	lds	r24, 0x006A
 14c:	8a 30       	cpi	r24, 0x0A	; 10
 14e:	01 f3       	breq	.-64     	; 0x110 <__vector_1+0x32>
 150:	11 c0       	rjmp	.+34     	; 0x174 <__vector_1+0x96>
if(display_for_INT0>=100)
{display_for_INT0=0;}
EICRA=0x0B;
}
}
	else if(EICRA==0x0B)
 152:	80 91 6a 00 	lds	r24, 0x006A
 156:	8b 30       	cpi	r24, 0x0B	; 11
 158:	59 f4       	brne	.+22     	; 0x170 <__vector_1+0x92>
	{			
	EICRA=0x02;			// 인터럽트신호를 다시 falling edge에서 발생하도록 설정한다. --> 스위치를 누름과 동시에 발생
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 6a 00 	sts	0x006A, r24
	SEG_ON_two_numbers_all_in_one(display_for_INT0);
 160:	80 91 0b 01 	lds	r24, 0x010B
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 57 01 	call	0x2ae	; 0x2ae <SEG_ON_two_numbers_all_in_one>
	count_for_INT0=0;
 16a:	10 92 0a 01 	sts	0x010A, r1
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__vector_1+0x96>
	}
	else{LED_PORT=0xFF;}
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8b bb       	out	0x1b, r24	; 27

}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	1f 91       	pop	r17
 18e:	0f 90       	pop	r0
 190:	0b be       	out	0x3b, r0	; 59
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_2>:

SIGNAL(SIG_INTERRUPT1)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
SEG_ON_two_numbers_all_in_one(0);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 57 01 	call	0x2ae	; 0x2ae <SEG_ON_two_numbers_all_in_one>
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <main>:

void main()                                // main문의 내용
{
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
   unsigned char i;
	IO_init();		
 1f6:	0e 94 37 01 	call	0x26e	; 0x26e <IO_init>
	INT_init();	
 1fa:	0e 94 67 00 	call	0xce	; 0xce <INT_init>
	SEG_ON_two_numbers_all_in_one(0);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 57 01 	call	0x2ae	; 0x2ae <SEG_ON_two_numbers_all_in_one>
	while(1)
	{
	for(i=0;i<8;i++){
 206:	10 e0       	ldi	r17, 0x00	; 0
			LED_PORT =~(0x01<<i);	// 0x01에서 I만큼 << shifting 해주어 1을 왼쪽으로 1 bit씩 밀어낸다. 그리고 이 값을 반전 해주어서 결국엔 한 개의 LED씩 순차적으로 ON 해주는 코딩이다.
 208:	c1 e0       	ldi	r28, 0x01	; 1
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	ce 01       	movw	r24, r28
 20e:	01 2e       	mov	r0, r17
 210:	02 c0       	rjmp	.+4      	; 0x216 <main+0x26>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <main+0x22>
 21a:	80 95       	com	r24
 21c:	8b bb       	out	0x1b, r24	; 27
			delay_ms(1500);	// 1500ms 만큼 delay 해준다. 
 21e:	8c ed       	ldi	r24, 0xDC	; 220
 220:	95 e0       	ldi	r25, 0x05	; 5
 222:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
	IO_init();		
	INT_init();	
	SEG_ON_two_numbers_all_in_one(0);
	while(1)
	{
	for(i=0;i<8;i++){
 226:	1f 5f       	subi	r17, 0xFF	; 255
 228:	18 30       	cpi	r17, 0x08	; 8
 22a:	80 f3       	brcs	.-32     	; 0x20c <main+0x1c>
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	ee cf       	rjmp	.-36     	; 0x20c <main+0x1c>

00000230 <delay_us>:
#include "delay2.h"

void delay_us(unsigned int time)
{
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++)
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	03 c0       	rjmp	.+6      	; 0x23c <delay_us+0xc>
	{
		asm("nop");
 236:	00 00       	nop
#include "delay2.h"

void delay_us(unsigned int time)
{
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++)
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	d0 f3       	brcs	.-12     	; 0x236 <delay_us+0x6>
	{
		asm("nop");
	}
}
 242:	08 95       	ret

00000244 <delay_ms>:

void delay_ms(unsigned int time)
{
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	8c 01       	movw	r16, r24
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++)
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	d0 e0       	ldi	r29, 0x00	; 0
 252:	05 c0       	rjmp	.+10     	; 0x25e <delay_ms+0x1a>
	{
		delay_us(1000/14);
 254:	87 e4       	ldi	r24, 0x47	; 71
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 18 01 	call	0x230	; 0x230 <delay_us>
}

void delay_ms(unsigned int time)
{
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++)
 25c:	21 96       	adiw	r28, 0x01	; 1
 25e:	c0 17       	cp	r28, r16
 260:	d1 07       	cpc	r29, r17
 262:	c0 f3       	brcs	.-16     	; 0x254 <delay_ms+0x10>
	{
		delay_us(1000/14);
	}
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <IO_init>:
unsigned char seg_num[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
// 변수들이 선언되는 곳은 source file 이므로 여기에 선언해준다.

void IO_init()
{
   DDRA=0XFF;         // PORT A(왼쪽세그먼트)는 모두출력으로 사용할 것임
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	8a bb       	out	0x1a, r24	; 26
   DDRC=0xFF;         // PORT C(오른쪽세그먼트)는 모두출력으로 사용할 것임
 272:	84 bb       	out	0x14, r24	; 20
   DDRD=0x00;		// PORT D는 모두 입력으로 사용할 것임.
 274:	11 ba       	out	0x11, r1	; 17
}
 276:	08 95       	ret

00000278 <LED_ON>:

void LED_ON(unsigned char pin)
{
//	pint = -pin;	// 입력받은 pin을 반전 시켜준다.
//	PORTA = PORTA & pin;
	PORTA &= (~pin);
 278:	9b b3       	in	r25, 0x1b	; 27
 27a:	80 95       	com	r24
 27c:	89 23       	and	r24, r25
 27e:	8b bb       	out	0x1b, r24	; 27
}
 280:	08 95       	ret

00000282 <LED_OFF>:

void LED_OFF(unsigned char pin)
{
	PORTA |= (pin);
 282:	9b b3       	in	r25, 0x1b	; 27
 284:	98 2b       	or	r25, r24
 286:	9b bb       	out	0x1b, r25	; 27
}
 288:	08 95       	ret

0000028a <SEG_ON>:

void SEG_ON(unsigned char PORT, unsigned char data)
{
	if(PORT=='A')
 28a:	81 34       	cpi	r24, 0x41	; 65
 28c:	39 f4       	brne	.+14     	; 0x29c <SEG_ON+0x12>
	{
	PORTA=seg_num[data];
 28e:	e6 2f       	mov	r30, r22
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	e0 50       	subi	r30, 0x00	; 0
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	80 81       	ld	r24, Z
 298:	8b bb       	out	0x1b, r24	; 27
 29a:	08 95       	ret
	}
	else if(PORT=='C')
 29c:	83 34       	cpi	r24, 0x43	; 67
 29e:	31 f4       	brne	.+12     	; 0x2ac <SEG_ON+0x22>
	{
	PORTC=seg_num[data];
 2a0:	e6 2f       	mov	r30, r22
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	e0 50       	subi	r30, 0x00	; 0
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	80 81       	ld	r24, Z
 2aa:	85 bb       	out	0x15, r24	; 21
 2ac:	08 95       	ret

000002ae <SEG_ON_two_numbers_all_in_one>:
	}
}

void SEG_ON_two_numbers_all_in_one(unsigned int data)
{
	PORTA=seg_num[data/10];
 2ae:	6a e0       	ldi	r22, 0x0A	; 10
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodhi4>
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	31 e0       	ldi	r19, 0x01	; 1
 2ba:	62 0f       	add	r22, r18
 2bc:	73 1f       	adc	r23, r19
 2be:	fb 01       	movw	r30, r22
 2c0:	40 81       	ld	r20, Z
 2c2:	4b bb       	out	0x1b, r20	; 27
	PORTC=seg_num[data%10];
 2c4:	28 0f       	add	r18, r24
 2c6:	39 1f       	adc	r19, r25
 2c8:	f9 01       	movw	r30, r18
 2ca:	80 81       	ld	r24, Z
 2cc:	85 bb       	out	0x15, r24	; 21
}
 2ce:	08 95       	ret

000002d0 <__udivmodhi4>:
 2d0:	aa 1b       	sub	r26, r26
 2d2:	bb 1b       	sub	r27, r27
 2d4:	51 e1       	ldi	r21, 0x11	; 17
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <__udivmodhi4_ep>

000002d8 <__udivmodhi4_loop>:
 2d8:	aa 1f       	adc	r26, r26
 2da:	bb 1f       	adc	r27, r27
 2dc:	a6 17       	cp	r26, r22
 2de:	b7 07       	cpc	r27, r23
 2e0:	10 f0       	brcs	.+4      	; 0x2e6 <__udivmodhi4_ep>
 2e2:	a6 1b       	sub	r26, r22
 2e4:	b7 0b       	sbc	r27, r23

000002e6 <__udivmodhi4_ep>:
 2e6:	88 1f       	adc	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	5a 95       	dec	r21
 2ec:	a9 f7       	brne	.-22     	; 0x2d8 <__udivmodhi4_loop>
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	bc 01       	movw	r22, r24
 2f4:	cd 01       	movw	r24, r26
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
