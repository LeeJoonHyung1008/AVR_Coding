
INT_Quiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000032a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  000003c4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000b0  00000000  00000000  00000b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001c5  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000ea  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000263  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000070  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000107  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  0000126f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 23 01 	call	0x246	; 0x246 <main>
  c6:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <delay_us>:
int sign_flag = 0;
int i=500;
unsigned char count_for_INT0=0;	// count_for_INT0 이라는 전역변수를 0으로 초기화
unsigned char ref_tcnt,ref_tcnt_limit[3]={30,15,1};

void delay_us(unsigned int time){		// delay_us함수의 내용
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <delay_us+0x6>
  d4:	00 d0       	rcall	.+0      	; 0xd6 <delay_us+0x8>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	9c 83       	std	Y+4, r25	; 0x04
  dc:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++){
  de:	1a 82       	std	Y+2, r1	; 0x02
  e0:	19 82       	std	Y+1, r1	; 0x01
  e2:	06 c0       	rjmp	.+12     	; 0xf0 <delay_us+0x22>
		asm("nop");	// 한 클럭을 쉰다.
  e4:	00 00       	nop
unsigned char count_for_INT0=0;	// count_for_INT0 이라는 전역변수를 0으로 초기화
unsigned char ref_tcnt,ref_tcnt_limit[3]={30,15,1};

void delay_us(unsigned int time){		// delay_us함수의 내용
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++){
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	29 81       	ldd	r18, Y+1	; 0x01
  f2:	3a 81       	ldd	r19, Y+2	; 0x02
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	28 17       	cp	r18, r24
  fa:	39 07       	cpc	r19, r25
  fc:	98 f3       	brcs	.-26     	; 0xe4 <delay_us+0x16>
		asm("nop");	// 한 클럭을 쉰다.
	}
}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <delay_ms>:

void delay_ms(unsigned int time){		// delay_ms함수의 내용
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	00 d0       	rcall	.+0      	; 0x112 <delay_ms+0x6>
 112:	00 d0       	rcall	.+0      	; 0x114 <delay_ms+0x8>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	9c 83       	std	Y+4, r25	; 0x04
 11a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++){
 11c:	1a 82       	std	Y+2, r1	; 0x02
 11e:	19 82       	std	Y+1, r1	; 0x01
 120:	09 c0       	rjmp	.+18     	; 0x134 <delay_ms+0x28>
	delay_us(1000/14);	// delay_us함수에 1000/14를 넣어준다. 이는 원래 1000을 넣어줘야 하지만 코드가 진행되는 시간에 약간 오차가 있어서 14를 나눠주는 것이다.. 
 122:	87 e4       	ldi	r24, 0x47	; 71
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 67 00 	call	0xce	; 0xce <delay_us>
	}
}

void delay_ms(unsigned int time){		// delay_ms함수의 내용
	unsigned int ns_i;
	for(ns_i=0;ns_i<time;ns_i++){
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	29 81       	ldd	r18, Y+1	; 0x01
 136:	3a 81       	ldd	r19, Y+2	; 0x02
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	9c 81       	ldd	r25, Y+4	; 0x04
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	80 f3       	brcs	.-32     	; 0x122 <delay_ms+0x16>
	delay_us(1000/14);	// delay_us함수에 1000/14를 넣어준다. 이는 원래 1000을 넣어줘야 하지만 코드가 진행되는 시간에 약간 오차가 있어서 14를 나눠주는 것이다.. 
	}
}
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	08 95       	ret

00000150 <IO_init>:

void IO_init()
{
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xFF;	// PORT A의 모든 bit를 출력으로 설정한다. 여기서 DDRD = 0x1C;를 해주지 않는 이유는 INT 신호를 받기위해 INT로 입력을 받을 것이기 때문이다. I/O로써 받는 것이 아니므로 SW1 에 대한 PORTD 의 입출력 설정은 하지 않는다.
 158:	8a e3       	ldi	r24, 0x3A	; 58
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
}
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	08 95       	ret

00000168 <INT_init>:
void INT_init()
{
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	EICRA=0x02;	// 0x0A=0b00000010 이므로 0번 인터럽트를 falling edge로 사용하겠다는 뜻이다.
 170:	8a e6       	ldi	r24, 0x6A	; 106
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	22 e0       	ldi	r18, 0x02	; 2
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	EICRB=0x00;	// 아무런 인터럽트를 사용하지 않으므로 모두 0으로 설정한다.
 17a:	8a e5       	ldi	r24, 0x5A	; 90
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	10 82       	st	Z, r1
	EIMSK=0x01;	// 현재 0번 인터럽트를 사용할 것이므로 0x03=0b00000001로 설정하여 0번 인터럽트를 활성화 시켜준다.
 182:	89 e5       	ldi	r24, 0x59	; 89
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
	asm("SEI");	// 모든 인터럽트를 허용한다. (SREG의 7번 비트를 1로 만들어주는 어셈블리어)
 18c:	78 94       	sei
}
 18e:	cf 91       	pop	r28
 190:	df 91       	pop	r29
 192:	08 95       	ret

00000194 <__vector_1>:

SIGNAL(SIG_INTERRUPT0)	// 0번 인터럽트에 관한 내용이다. (함수의 이름과 Handle은 이미 정의되어 있으므로 정의된 이름으로 사용한다.) (1번 스위치이다.)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	00 90 5b 00 	lds	r0, 0x005B
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	if(EICRA == 0x02)
 1b6:	8a e6       	ldi	r24, 0x6A	; 106
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	21 f5       	brne	.+72     	; 0x20a <__vector_1+0x76>
	{
		EICRA = 0x03;
 1c2:	8a e6       	ldi	r24, 0x6A	; 106
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	23 e0       	ldi	r18, 0x03	; 3
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
		on_flag = 1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	90 93 07 01 	sts	0x0107, r25
 1d4:	80 93 06 01 	sts	0x0106, r24
		if(sign_flag == 0)
 1d8:	80 91 08 01 	lds	r24, 0x0108
 1dc:	90 91 09 01 	lds	r25, 0x0109
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <__vector_1+0x5e>
		{
			sign_flag = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 09 01 	sts	0x0109, r25
 1ec:	80 93 08 01 	sts	0x0108, r24
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <__vector_1+0x94>

		}
		else if(sign_flag==1)
 1f2:	80 91 08 01 	lds	r24, 0x0108
 1f6:	90 91 09 01 	lds	r25, 0x0109
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	91 05       	cpc	r25, r1
 1fe:	a1 f4       	brne	.+40     	; 0x228 <__vector_1+0x94>
		{
			sign_flag = 0;
 200:	10 92 09 01 	sts	0x0109, r1
 204:	10 92 08 01 	sts	0x0108, r1
 208:	0f c0       	rjmp	.+30     	; 0x228 <__vector_1+0x94>
		}
	}
	else if(EICRA == 0x03)
 20a:	8a e6       	ldi	r24, 0x6A	; 106
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	80 81       	ld	r24, Z
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	49 f4       	brne	.+18     	; 0x228 <__vector_1+0x94>
	{
		EICRA = 0x02;
 216:	8a e6       	ldi	r24, 0x6A	; 106
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	22 e0       	ldi	r18, 0x02	; 2
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
		on_flag = 0;
 220:	10 92 07 01 	sts	0x0107, r1
 224:	10 92 06 01 	sts	0x0106, r1
	}
}
 228:	cf 91       	pop	r28
 22a:	df 91       	pop	r29
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	00 92 5b 00 	sts	0x005B, r0
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <main>:

void main()
{
 246:	df 93       	push	r29
 248:	cf 93       	push	r28
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
	IO_init();		
 24e:	0e 94 a8 00 	call	0x150	; 0x150 <IO_init>
	INT_init();	// IO_init()과 INT_init()을 선언해준다. 원래의 코딩에서는 빠져있지만 우리가 사용할 PORT/Interrupt Register들을 설정해주어야 한다. 이를 main 함수 밖에서 사용자 정의 함수를 만들고 선언을 해줘도 main 함수 내에서 호출을 하지 않으면 결국 소용이 없는 것이다.
 252:	0e 94 b4 00 	call	0x168	; 0x168 <INT_init>
 256:	07 c0       	rjmp	.+14     	; 0x266 <main+0x20>
				i--;
				if(i<1)
				{	i=1;	}
			}	
		}
	}
 258:	00 00       	nop
 25a:	05 c0       	rjmp	.+10     	; 0x266 <main+0x20>
 25c:	00 00       	nop
 25e:	03 c0       	rjmp	.+6      	; 0x266 <main+0x20>
 260:	00 00       	nop
 262:	01 c0       	rjmp	.+2      	; 0x266 <main+0x20>
 264:	00 00       	nop
	IO_init();		
	INT_init();	// IO_init()과 INT_init()을 선언해준다. 원래의 코딩에서는 빠져있지만 우리가 사용할 PORT/Interrupt Register들을 설정해주어야 한다. 이를 main 함수 밖에서 사용자 정의 함수를 만들고 선언을 해줘도 main 함수 내에서 호출을 하지 않으면 결국 소용이 없는 것이다.
	while(1)
	{
		
			PORTA=0x00;
 266:	8b e3       	ldi	r24, 0x3B	; 59
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	10 82       	st	Z, r1
			delay_us(1000-i);
 26e:	80 91 00 01 	lds	r24, 0x0100
 272:	90 91 01 01 	lds	r25, 0x0101
 276:	28 ee       	ldi	r18, 0xE8	; 232
 278:	33 e0       	ldi	r19, 0x03	; 3
 27a:	a9 01       	movw	r20, r18
 27c:	48 1b       	sub	r20, r24
 27e:	59 0b       	sbc	r21, r25
 280:	ca 01       	movw	r24, r20
 282:	0e 94 67 00 	call	0xce	; 0xce <delay_us>
		
			PORTA=0xFF;
 286:	8b e3       	ldi	r24, 0x3B	; 59
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
			delay_us(i);
 290:	80 91 00 01 	lds	r24, 0x0100
 294:	90 91 01 01 	lds	r25, 0x0101
 298:	0e 94 67 00 	call	0xce	; 0xce <delay_us>
		if(on_flag ==1)
 29c:	80 91 06 01 	lds	r24, 0x0106
 2a0:	90 91 07 01 	lds	r25, 0x0107
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	91 05       	cpc	r25, r1
 2a8:	b9 f6       	brne	.-82     	; 0x258 <main+0x12>
		{
			if(sign_flag ==1)
 2aa:	80 91 08 01 	lds	r24, 0x0108
 2ae:	90 91 09 01 	lds	r25, 0x0109
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	91 05       	cpc	r25, r1
 2b6:	c1 f4       	brne	.+48     	; 0x2e8 <main+0xa2>
			{
				i++;
 2b8:	80 91 00 01 	lds	r24, 0x0100
 2bc:	90 91 01 01 	lds	r25, 0x0101
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 01 01 	sts	0x0101, r25
 2c6:	80 93 00 01 	sts	0x0100, r24
				if(i>1000)
 2ca:	80 91 00 01 	lds	r24, 0x0100
 2ce:	90 91 01 01 	lds	r25, 0x0101
 2d2:	f3 e0       	ldi	r31, 0x03	; 3
 2d4:	89 3e       	cpi	r24, 0xE9	; 233
 2d6:	9f 07       	cpc	r25, r31
 2d8:	0c f2       	brlt	.-126    	; 0x25c <main+0x16>
				{	i=1000;	}
 2da:	88 ee       	ldi	r24, 0xE8	; 232
 2dc:	93 e0       	ldi	r25, 0x03	; 3
 2de:	90 93 01 01 	sts	0x0101, r25
 2e2:	80 93 00 01 	sts	0x0100, r24
				i--;
				if(i<1)
				{	i=1;	}
			}	
		}
	}
 2e6:	bf cf       	rjmp	.-130    	; 0x266 <main+0x20>
				i++;
				if(i>1000)
				{	i=1000;	}

			}
			else if(sign_flag==0)
 2e8:	80 91 08 01 	lds	r24, 0x0108
 2ec:	90 91 09 01 	lds	r25, 0x0109
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <main+0xb0>
 2f4:	b5 cf       	rjmp	.-150    	; 0x260 <main+0x1a>
			{
				i--;
 2f6:	80 91 00 01 	lds	r24, 0x0100
 2fa:	90 91 01 01 	lds	r25, 0x0101
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	90 93 01 01 	sts	0x0101, r25
 304:	80 93 00 01 	sts	0x0100, r24
				if(i<1)
 308:	80 91 00 01 	lds	r24, 0x0100
 30c:	90 91 01 01 	lds	r25, 0x0101
 310:	18 16       	cp	r1, r24
 312:	19 06       	cpc	r1, r25
 314:	0c f4       	brge	.+2      	; 0x318 <main+0xd2>
 316:	a6 cf       	rjmp	.-180    	; 0x264 <main+0x1e>
				{	i=1;	}
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 01 01 	sts	0x0101, r25
 320:	80 93 00 01 	sts	0x0100, r24
			}	
		}
	}
 324:	a0 cf       	rjmp	.-192    	; 0x266 <main+0x20>

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
