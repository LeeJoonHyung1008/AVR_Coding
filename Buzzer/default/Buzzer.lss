
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000208  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  000002a6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000007e  00000000  00000000  00000a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001c0  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000103  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002a7  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000e9  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000184  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  c6:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <delay_us>:
int keypad();                           //키패드 함수의 선언
int data=0;                             //data라는 전역변수 선언 그 후 0으로 초기화
void delay_us(unsigned int time) 
{
   unsigned int ns_i;
   for(ns_i=0;ns_i<time;ns_i++)
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	03 c0       	rjmp	.+6      	; 0xda <delay_us+0xc>
   {
       asm("nop");
  d4:	00 00       	nop
int keypad();                           //키패드 함수의 선언
int data=0;                             //data라는 전역변수 선언 그 후 0으로 초기화
void delay_us(unsigned int time) 
{
   unsigned int ns_i;
   for(ns_i=0;ns_i<time;ns_i++)
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	28 17       	cp	r18, r24
  dc:	39 07       	cpc	r19, r25
  de:	d0 f3       	brcs	.-12     	; 0xd4 <delay_us+0x6>
   {
       asm("nop");
   }   
}
  e0:	08 95       	ret

000000e2 <delay_ms>:
void delay_ms(unsigned int time)
{
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	8c 01       	movw	r16, r24
   unsigned int ns_i;
   for(ns_i=0;ns_i<time;ns_i++)
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	05 c0       	rjmp	.+10     	; 0xfc <delay_ms+0x1a>
   {
      delay_us(1000/14);
  f2:	87 e4       	ldi	r24, 0x47	; 71
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 67 00 	call	0xce	; 0xce <delay_us>
   }   
}
void delay_ms(unsigned int time)
{
   unsigned int ns_i;
   for(ns_i=0;ns_i<time;ns_i++)
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	c0 17       	cp	r28, r16
  fe:	d1 07       	cpc	r29, r17
 100:	c0 f3       	brcs	.-16     	; 0xf2 <delay_ms+0x10>
   {
      delay_us(1000/14);
   }
}                                               //사용자 정의 delay 함수 
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

0000010c <keypad>:

int keypad()                                   // 키패드 함수 정의
{
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
	int flag=0;                                     // flag라는 변수 선언 및 0으로 초기화

	PORTD=PORTD&0xFB;
 114:	92 98       	cbi	0x12, 2	; 18
	delay_ms(100);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 71 00 	call	0xe2	; 0xe2 <delay_ms>
	if((PIND&0x20)==0)flag=array[1];              
 11e:	85 99       	sbic	0x10, 5	; 16
 120:	05 c0       	rjmp	.+10     	; 0x12c <keypad+0x20>
 122:	80 91 01 01 	lds	r24, 0x0101
 126:	c8 2f       	mov	r28, r24
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <keypad+0x24>
   }
}                                               //사용자 정의 delay 함수 

int keypad()                                   // 키패드 함수 정의
{
	int flag=0;                                     // flag라는 변수 선언 및 0으로 초기화
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0

	PORTD=PORTD&0xFB;
	delay_ms(100);
	if((PIND&0x20)==0)flag=array[1];              
	if((PIND&0x40)==0)flag=array[4];
 130:	86 99       	sbic	0x10, 6	; 16
 132:	04 c0       	rjmp	.+8      	; 0x13c <keypad+0x30>
 134:	80 91 04 01 	lds	r24, 0x0104
 138:	c8 2f       	mov	r28, r24
 13a:	d0 e0       	ldi	r29, 0x00	; 0
	if((PIND&0x80)==0)flag=array[7];
 13c:	87 99       	sbic	0x10, 7	; 16
 13e:	04 c0       	rjmp	.+8      	; 0x148 <keypad+0x3c>
 140:	80 91 07 01 	lds	r24, 0x0107
 144:	c8 2f       	mov	r28, r24
 146:	d0 e0       	ldi	r29, 0x00	; 0
	PORTD|=~0xFB;
 148:	92 9a       	sbi	0x12, 2	; 18

	PORTD=PORTD&0xF7;
 14a:	93 98       	cbi	0x12, 3	; 18
	delay_ms(100);
 14c:	84 e6       	ldi	r24, 0x64	; 100
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 71 00 	call	0xe2	; 0xe2 <delay_ms>
	if((PIND&0x20)==0)flag=array[2];   
 154:	85 99       	sbic	0x10, 5	; 16
 156:	04 c0       	rjmp	.+8      	; 0x160 <keypad+0x54>
 158:	80 91 02 01 	lds	r24, 0x0102
 15c:	c8 2f       	mov	r28, r24
 15e:	d0 e0       	ldi	r29, 0x00	; 0
	if((PIND&0x40)==0)flag=array[5];    
 160:	86 99       	sbic	0x10, 6	; 16
 162:	04 c0       	rjmp	.+8      	; 0x16c <keypad+0x60>
 164:	80 91 05 01 	lds	r24, 0x0105
 168:	c8 2f       	mov	r28, r24
 16a:	d0 e0       	ldi	r29, 0x00	; 0
	if((PIND&0x80)==0)flag=array[8];    
 16c:	87 99       	sbic	0x10, 7	; 16
 16e:	04 c0       	rjmp	.+8      	; 0x178 <keypad+0x6c>
 170:	80 91 08 01 	lds	r24, 0x0108
 174:	c8 2f       	mov	r28, r24
 176:	d0 e0       	ldi	r29, 0x00	; 0
	PORTD|=~0xF7;
 178:	93 9a       	sbi	0x12, 3	; 18

	PORTD=PORTD&0xEF;
 17a:	94 98       	cbi	0x12, 4	; 18
	delay_ms(100);
 17c:	84 e6       	ldi	r24, 0x64	; 100
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 71 00 	call	0xe2	; 0xe2 <delay_ms>
	if((PIND&0x20)==0)flag=array[3];  
 184:	85 99       	sbic	0x10, 5	; 16
 186:	04 c0       	rjmp	.+8      	; 0x190 <keypad+0x84>
 188:	80 91 03 01 	lds	r24, 0x0103
 18c:	c8 2f       	mov	r28, r24
 18e:	d0 e0       	ldi	r29, 0x00	; 0
	if((PIND&0x40)==0)flag=array[6];  
 190:	86 99       	sbic	0x10, 6	; 16
 192:	04 c0       	rjmp	.+8      	; 0x19c <keypad+0x90>
 194:	80 91 06 01 	lds	r24, 0x0106
 198:	c8 2f       	mov	r28, r24
 19a:	d0 e0       	ldi	r29, 0x00	; 0
	if((PIND&0x80)==0)flag=array[9];    
 19c:	87 99       	sbic	0x10, 7	; 16
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <keypad+0x9c>
 1a0:	80 91 09 01 	lds	r24, 0x0109
 1a4:	c8 2f       	mov	r28, r24
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
	PORTD|=~0xEF;
 1a8:	94 9a       	sbi	0x12, 4	; 18

	return flag;
}                                                  //서보 모터 제어 코드와 내용은 같다. 대신 차이점이 있다면 서보모터는 스위치를 때도 초기상태로 돌아가면 안되지만 피아노는 스위치를 때도 다시 누를 수 있어야 하므로 flag값을 main문으로 보내지 않고 timer함수로 보내 OCR1A값과 ICR값을 직접 초기화 해준다.
 1aa:	ce 01       	movw	r24, r28
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	08 95       	ret

000001b6 <IO_init>:

void IO_init()                            //입출력 함수의 정의
{
   
   DDRB=0xff;                        // 부저를 사용할것이므로 PORTB 활성화(PORTB.5만 활성화 시켜줘도 무방하다.)
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	87 bb       	out	0x17, r24	; 23
   DDRD=0x1C;                          // 키패드를 사용할것이므로 PORTD를 활성화해줌
 1ba:	8c e1       	ldi	r24, 0x1C	; 28
 1bc:	81 bb       	out	0x11, r24	; 17
}
 1be:	08 95       	ret

000001c0 <TIMER_init>:

void TIMER_init()                              // 타이머 함수의 정의
{              
	TCCR1A=0x82;                        // 10000010으로 fast PWM모드로 non_inverting 모드를 사용할 것 이므로 7번 6번 비트를 10으로 설정해주고 Fast PWM모드를 사용할것이므로 1,0번 비트를 10으로 설정해준다.
 1c0:	82 e8       	ldi	r24, 0x82	; 130
 1c2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x1B;                       // 00011011으로 fast PWM모드를 사용할것이므로 4,3번 비트를 11로 8분주비를 사용할것이므로 1번 0번 비트는 11로 설정해주었다.         
 1c4:	8b e1       	ldi	r24, 0x1B	; 27
 1c6:	8e bd       	out	0x2e, r24	; 46
	TIMSK=0x0C;                      // 00001100으로 타이머 1번의 B핀의 output capture모드를 사용, 그리고 타이머 1번을 설정할것이므로 2번 비트를 1로 설정
 1c8:	8c e0       	ldi	r24, 0x0C	; 12
 1ca:	87 bf       	out	0x37, r24	; 55
	int data=0;                               //data라는 값을 선언해주고 0으로 초기화
	data=keypad();                           //data는 keypad함수의 리턴값을 받아옴
 1cc:	0e 94 86 00 	call	0x10c	; 0x10c <keypad>
	ICR1=data*2;                             // duty cycle을 50%로 하기 위해서 OCR1A값의 2배를 취해줌
 1d0:	9c 01       	movw	r18, r24
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	37 bd       	out	0x27, r19	; 39
 1d8:	26 bd       	out	0x26, r18	; 38
	OCR1A=data  ;                            // OCR1A값은 각 음계에 맞는 data값으로 초기화      
 1da:	9b bd       	out	0x2b, r25	; 43
 1dc:	8a bd       	out	0x2a, r24	; 42
   	sei();                             // 인터럽트 활성화!
 1de:	78 94       	sei
}
 1e0:	08 95       	ret

000001e2 <__vector_14>:

SIGNAL (SIG_OVERFLOW1)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
	TCNT1=0;                                 // 오차를 최대한 줄이기 위해서 tcnt는 수시로 0으로 초기화 해준다.
 1ec:	1d bc       	out	0x2d, r1	; 45
 1ee:	1c bc       	out	0x2c, r1	; 44
}
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <main>:

void main()
{

	IO_init();                                   //입출력함수 호출
 1fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <IO_init>
	TIMER_init();                              //타이머 함수 호출
 1fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <TIMER_init>
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x8>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
