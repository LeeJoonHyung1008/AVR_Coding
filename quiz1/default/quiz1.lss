
quiz1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000178  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000020e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000008f  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000322  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001eb  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002ca  00000000  00000000  00000f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000013f  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000b7  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000041  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  c6:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <delay_200m>:
typedef unsigned char byte;
char led, i;
char initial_LED = 2;      

void delay_200m()
{
  ce:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	ef e4       	ldi	r30, 0x4F	; 79
  d2:	f3 ec       	ldi	r31, 0xC3	; 195
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <delay_200m+0x6>
  d8:	00 c0       	rjmp	.+0      	; 0xda <delay_200m+0xc>
  da:	00 00       	nop
  dc:	81 50       	subi	r24, 0x01	; 1
	byte k;
	for(k=0; k<20; k++)
  de:	c1 f7       	brne	.-16     	; 0xd0 <delay_200m+0x2>
	{
		_delay_ms(200);
	}
}
  e0:	08 95       	ret

000000e2 <LED_ON>:
void LED_ON(unsigned char pin)  // LED를 on 해주는 함수이다.
{
//   pint = -pin;   // 입력받은 pin을 반전 시켜준다.
//   PORTA = PORTA & pin;  // 이 값을 &(AND)로 masking 해준다.
   PORTA &= (~pin);  // 입력받은 pin을 반전 시켜준다. 그리고 이 값을 &(AND)로 masking 해준다.
  e2:	9b b3       	in	r25, 0x1b	; 27
  e4:	80 95       	com	r24
  e6:	89 23       	and	r24, r25
  e8:	8b bb       	out	0x1b, r24	; 27
}
  ea:	08 95       	ret

000000ec <LED_OFF>:
void LED_OFF(unsigned char pin)
{
   PORTA |= (pin); // 입력받은 pin 값과 |(OR) 연산해준다.
  ec:	9b b3       	in	r25, 0x1b	; 27
  ee:	98 2b       	or	r25, r24
  f0:	9b bb       	out	0x1b, r25	; 27
}
  f2:	08 95       	ret

000000f4 <IO_init>:

void IO_init()
{
   PORTA=0xFF;  // PORT A에 0xFF 값을 넣어주어 모든 LED를 OFF 해준다.
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8b bb       	out	0x1b, r24	; 27
   DDRA=0xFF;   // PORT A의 모든 bit를 출력으로 설정한다.
  f8:	8a bb       	out	0x1a, r24	; 26
   PORTC=0xFF;  // PORT C에 0xFF 값을 넣어주어 모든 LED를 OFF 해준다.
  fa:	85 bb       	out	0x15, r24	; 21
   DDRC=0xFF;  // PORT C의 모든 bit를 출력으로 설정한다.
  fc:	84 bb       	out	0x14, r24	; 20
   DDRD=0x1C;  // PORT D의 2,3,4 bit를 출력으로 설정한다. 나머지 bit는 입력이다.
  fe:	8c e1       	ldi	r24, 0x1C	; 28
 100:	81 bb       	out	0x11, r24	; 17
}
 102:	08 95       	ret

00000104 <SW>:
unsigned char SW(unsigned char pin)
{
   unsigned char sw_input;  
   sw_input = PIND; 
 104:	90 b3       	in	r25, 0x10	; 16
   sw_input &= pin; 
   return sw_input;
}
 106:	89 23       	and	r24, r25
 108:	08 95       	ret

0000010a <left>:

void left()
{
    led &= (~initial_LED);
 10a:	80 91 00 01 	lds	r24, 0x0100
 10e:	80 95       	com	r24
 110:	90 91 02 01 	lds	r25, 0x0102
 114:	89 23       	and	r24, r25
	PORTA = led;
 116:	8b bb       	out	0x1b, r24	; 27
    led = (led >> 1) | 0x80;
 118:	86 95       	lsr	r24
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 93 02 01 	sts	0x0102, r24
}
 120:	08 95       	ret

00000122 <right>:


void right()
{
    led &= (~initial_LED);
 122:	80 91 00 01 	lds	r24, 0x0100
 126:	80 95       	com	r24
 128:	90 91 02 01 	lds	r25, 0x0102
 12c:	89 23       	and	r24, r25
    PORTA = led;
 12e:	8b bb       	out	0x1b, r24	; 27
    led = (led << 1);
 130:	88 0f       	add	r24, r24
 132:	80 93 02 01 	sts	0x0102, r24
}
 136:	08 95       	ret

00000138 <blink>:

void blink()
{
	PORTA = 0x00;
 138:	1b ba       	out	0x1b, r1	; 27
	delay_200m();
 13a:	0e 94 67 00 	call	0xce	; 0xce <delay_200m>
	PORTA = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8b bb       	out	0x1b, r24	; 27
	delay_200m();
 142:	0e 94 67 00 	call	0xce	; 0xce <delay_200m>
}
 146:	08 95       	ret

00000148 <main>:

void main(void)
{               
IO_init();
 148:	0e 94 7a 00 	call	0xf4	; 0xf4 <IO_init>
LED_ON(initial_LED);
 14c:	80 91 00 01 	lds	r24, 0x0100
 150:	0e 94 71 00 	call	0xe2	; 0xe2 <LED_ON>
   DDRD=0x1C;  // PORT D의 2,3,4 bit를 출력으로 설정한다. 나머지 bit는 입력이다.
}
unsigned char SW(unsigned char pin)
{
   unsigned char sw_input;  
   sw_input = PIND; 
 154:	80 b3       	in	r24, 0x10	; 16
{               
IO_init();
LED_ON(initial_LED);
while(1)
   {
      if(SW(1)==0)    // Switch 1번을 누르면
 156:	80 fd       	sbrc	r24, 0
 158:	03 c0       	rjmp	.+6      	; 0x160 <main+0x18>
      {
      left(); // LED 1,2,3,4를 켜줍니다.
 15a:	0e 94 85 00 	call	0x10a	; 0x10a <left>
 15e:	fa cf       	rjmp	.-12     	; 0x154 <main+0xc>
   DDRD=0x1C;  // PORT D의 2,3,4 bit를 출력으로 설정한다. 나머지 bit는 입력이다.
}
unsigned char SW(unsigned char pin)
{
   unsigned char sw_input;  
   sw_input = PIND; 
 160:	80 b3       	in	r24, 0x10	; 16
   {
      if(SW(1)==0)    // Switch 1번을 누르면
      {
      left(); // LED 1,2,3,4를 켜줍니다.
      }
      else if(SW(2)==0) // Switch 2번을 누르면
 162:	81 fd       	sbrc	r24, 1
 164:	03 c0       	rjmp	.+6      	; 0x16c <main+0x24>
      {
      right();   // LED 5,6,7,8을 켜줍니다.
 166:	0e 94 91 00 	call	0x122	; 0x122 <right>
 16a:	f4 cf       	rjmp	.-24     	; 0x154 <main+0xc>
      } 
      else
      {                 // 이 모든 경우가 아니라면 모든 LED를 OFF 합니다.
      LED_OFF(0xFF);
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	0e 94 76 00 	call	0xec	; 0xec <LED_OFF>
 172:	f0 cf       	rjmp	.-32     	; 0x154 <main+0xc>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
